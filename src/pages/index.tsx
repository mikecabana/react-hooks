import type { NextPage } from 'next';
import Head from 'next/head';
import { useCart } from '../hooks/use-cart';
import { Cart } from '../models/cart.interface';

interface Product {
	id: number;
	name: string;
	price: number;
}

const products: Product[] = [
	{ id: 1, name: 'Book', price: 2000 },
	{ id: 2, name: 'T-Shirt', price: 2800 },
	{ id: 3, name: 'Coffee Cup', price: 1600 },
];

const Home: NextPage = () => {
	const { cart, setCart } = useCart<Product>();

	const calculateTotal = (cart: Cart) => cart.items.reduce((total, item) => (total += item.product.price * item.quantity), 0);

	const clearCart = () => {
		setCart({ items: [], total: 0 });
	};

	const addItemToCart = (product: Product) => {
		const foundItem = cart.items.find((item) => item.product.id === product.id);
		if (!foundItem) {
			cart.items.push({ product, quantity: 1 });
			cart.total = calculateTotal(cart);
		} else {
			foundItem.quantity += 1;
			cart.total = calculateTotal(cart);
		}
		setCart({ ...cart });
	};

	const removeItemFromCart = (product: Product) => {
		const foundItem = cart.items.find((item) => item.product.id === product.id);
		if (foundItem && foundItem.quantity >= 1) {
			foundItem.quantity -= 1;
			cart.total = calculateTotal(cart);
		} else {
			cart.items = cart.items.filter((item) => item.product.id !== product.id);
		}
		setCart({ ...cart });
	};

	const removeAllItemsFromCart = (product: Product) => {
		cart.items = cart.items.filter((item) => item.product.id !== product.id);
		cart.total = calculateTotal(cart);
		setCart({ ...cart });
	};

	return (
		<div className="container">
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<main className="main">
				<div>
					<div className="products">
						{products.map((p, i) => (
							<div key={i} className="card product">
								<h4>{p.name}</h4>
								<p>{new Intl.NumberFormat('en-CA', { style: 'currency', currency: 'CAD' }).format(p.price / 100)}</p>
								<button className="btn btn-block" onClick={() => addItemToCart(p)}>
									Add To Cart
								</button>
							</div>
						))}
					</div>
				</div>

				<div>
					<div className="card cart">
						<h4>Cart</h4>

						{cart.items.length <= 0 && <span>No items in cart</span>}

						{cart.items.length > 0 && (
							<>
								{cart.items.map((item, i) => (
									<div key={i} className="cart-item">
										<div style={{ display: 'flex', justifyContent: 'space-between' }}>
											<div>
												{item.quantity}
												{'x '}
												{item.product.name}
											</div>
											<div>
												{new Intl.NumberFormat('en-CA', { style: 'currency', currency: 'CAD' }).format(
													(item.product.price * item.quantity) / 100
												)}
											</div>
										</div>
										<div style={{ display: 'flex', justifyContent: 'space-between' }}>
											<div className="btn-group">
												<button className="btn btn-sm" onClick={() => addItemToCart(item.product)}>
													+
												</button>
												<button className="btn btn-sm" onClick={() => removeItemFromCart(item.product)}>
													-
												</button>
											</div>
											<div>
												<button className="btn btn-sm" onClick={() => removeAllItemsFromCart(item.product)}>
													‚ùå
												</button>
											</div>
										</div>
									</div>
								))}

								<h4 style={{ display: 'flex', justifyContent: 'space-between' }}>
									<div>Total:</div>
									<div>
										{new Intl.NumberFormat('en-CA', { style: 'currency', currency: 'CAD' }).format(cart.total / 100)}
									</div>
								</h4>
								<button className="btn btn-block" onClick={() => clearCart()}>
									Clear Cart
								</button>
								<button className="btn btn-primary btn-block">Checkout</button>
							</>
						)}
					</div>
				</div>
			</main>
		</div>
	);
};

export default Home;
